__version__ = (1, 6, 4)

#            ¬© Copyright 2024
#           https://t.me/HikkTutor 
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html
#‚îè‚îì‚îÅ‚îè‚îì‚îÅ‚îÅ‚îè‚îì‚îÅ‚îÅ‚îè‚îì‚îÅ‚îÅ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îì‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îè‚îì‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
#‚îÉ‚îÉ‚îÅ‚îÉ‚îÉ‚îÅ‚îÅ‚îÉ‚îÉ‚îÅ‚îÅ‚îÉ‚îÉ‚îÅ‚îÅ‚îÉ‚îè‚îì‚îè‚îì‚îÉ‚îÅ‚îÅ‚îÅ‚îÅ‚îè‚îõ‚îó‚îì‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
#‚îÉ‚îó‚îÅ‚îõ‚îÉ‚îè‚îì‚îÉ‚îÉ‚îè‚îì‚îÉ‚îÉ‚îè‚îì‚îó‚îõ‚îÉ‚îÉ‚îó‚îõ‚îè‚îì‚îè‚îì‚îó‚îì‚îè‚îõ‚îè‚îÅ‚îÅ‚îì‚îè‚îÅ‚îì‚îÅ‚îÅ‚îÅ‚îÅ
#‚îÉ‚îè‚îÅ‚îì‚îÉ‚î£‚î´‚îÉ‚îó‚îõ‚îõ‚îÉ‚îó‚îõ‚îõ‚îÅ‚îÅ‚îÉ‚îÉ‚îÅ‚îÅ‚îÉ‚îÉ‚îÉ‚îÉ‚îÅ‚îÉ‚îÉ‚îÅ‚îÉ‚îè‚îì‚îÉ‚îÉ‚îè‚îõ‚îÅ‚îÅ‚îÅ‚îÅ
#‚îÉ‚îÉ‚îÅ‚îÉ‚îÉ‚îÉ‚îÉ‚îÉ‚îè‚îì‚îì‚îÉ‚îè‚îì‚îì‚îÅ‚îè‚îõ‚îó‚îì‚îÅ‚îÉ‚îó‚îõ‚îÉ‚îÅ‚îÉ‚îó‚îì‚îÉ‚îó‚îõ‚îÉ‚îÉ‚îÉ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
#‚îó‚îõ‚îÅ‚îó‚îõ‚îó‚îõ‚îó‚îõ‚îó‚îõ‚îó‚îõ‚îó‚îõ‚îÅ‚îó‚îÅ‚îÅ‚îõ‚îÅ‚îó‚îÅ‚îÅ‚îõ‚îÅ‚îó‚îÅ‚îõ‚îó‚îÅ‚îÅ‚îõ‚îó‚îõ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
#‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
#‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
# load from: t.me:HikkTutor 
# meta developer:@HikkTutor 
# meta banner:https://t.me/HikkTutor
# name: Doxer 
from .. import loader, utils
import random
import asyncio
from telethon.tl.types import User, Channel
from datetime import datetime, timedelta
import requests

@loader.tds
class Doxer(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–µ–π–∫-–¥–æ–∫—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞."""
    strings = {'name': 'Doxer'}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "animation_type",
                "standart",
                lambda: "–¢–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏: –∫–æ—Ä–æ—Ç–∫–∞—è, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–ª–∏ –¥–ª–∏–Ω–Ω–∞—è",
                validator=loader.validators.Choice(["short", "standart", "long"])
            ),
            loader.ConfigValue(
                "InfoAnimation",
                False,
                lambda: "–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                validator=loader.validators.Boolean()
            )
        )
        self.is_doxing = False

        self.male_names = [
            "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–î–º–∏—Ç—Ä–∏–π", "–ò–≤–∞–Ω", "–ú–∞–∫—Å–∏–º", "–ê—Ä—Ç–µ–º", "–°–µ—Ä–≥–µ–π", "–Æ—Ä–∏–π",
            "–†–æ–º–∞–Ω", "–í–∏—Ç–∞–ª–∏–π", "–î–µ–Ω–∏—Å", "–ê–ª–µ–∫—Å–µ–π", "–í–ª–∞–¥–∏—Å–ª–∞–≤", "–ù–∏–∫–∏—Ç–∞", "–°—Ç–∞–Ω–∏—Å–ª–∞–≤",
            "–ï–≥–æ—Ä", "–§–µ–¥–æ—Ä", "–ê–Ω—Ç–æ–Ω", "–ì—Ä–∏–≥–æ—Ä–∏–π", "–°–µ–º–µ–Ω", "–ü–∞–≤–µ–ª", "–ò–≥–æ—Ä—å", "–ê–Ω–∞—Ç–æ–ª–∏–π",
            "–ö–∏—Ä–∏–ª–ª", "–î–∞–Ω–∏–∏–ª", "–Ø—Ä–æ—Å–ª–∞–≤", "–†—É—Å—Ç–∞–º", "–í–∏–∫—Ç–æ—Ä", "–ò–ª—å—è", "–ü–µ—Ç—Ä",
            "–ù–∏–∫–æ–ª–∞–π", "–§–∏–ª–∏–ø–ø", "–ú–∏—Ö–∞–∏–ª", "–í–∞—Å–∏–ª–∏–π", "–ê—Ä—Å–µ–Ω", "–°–∞–≤–≤–∞", "–í–∞–ª–µ–Ω—Ç–∏–Ω",
            "–ï–≤–≥–µ–Ω–∏–π", "–ì–µ–Ω–Ω–∞–¥–∏–π", "–ê—Ä—Ç–µ–º–∏–π", "–ú–∞—Ç–≤–µ–π", "–õ–µ–æ–Ω–∏–¥", "–¢–∏–º—É—Ä", "–î–∞–Ω–∏–ª",
            "–†—É—Å–ª–∞–Ω", "–ú–∞—Ä–∫", "–í–∞–ª–µ—Ä–∏–π", "–í–ª–∞–¥–∏–º–∏—Ä", "–ì–µ–æ—Ä–≥–∏–π", "–ê—Ä—Å–µ–Ω–∏–π", "–ë–æ—Ä–∏—Å",
            "–ì–ª–µ–±", "–ï–≤–≥—Ä–∞—Ñ", "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω", "–õ—É–∫–∞", "–ú–∏—Ä–æ–Ω", "–û–ª–µ–≥", "–ü—Ä–æ—Ö–æ—Ä",
            "–†–æ–¥–∏–æ–Ω", "–¢—Ä–æ—Ñ–∏–º", "–Æ–ª–∏–∞–Ω", "–Ø–Ω", "–ê–ª—å–±–µ—Ä—Ç", "–ë–æ–≥–¥–∞–Ω", "–í–∞–¥–∏–º", "–î–∞–≤–∏–¥",
            "–ï–ª–∏—Å–µ–π", "–ó–∞—Ö–∞—Ä", "–ò–≥–Ω–∞—Ç", "–ö–ª–∏–º", "–õ–µ–≤", "–ú–∞—Ä—Ç–∏–Ω", "–ù–∞–∑–∞—Ä", "–ü–ª–∞—Ç–æ–Ω",
            "–†–∞—Ç–º–∏—Ä", "–°–∞–≤–µ–ª–∏–π", "–¢–∏—Ö–æ–Ω", "–§–∏–ª–∏–ø–ø", "–≠–º–∏–ª—å", "–Ø—Ä–æ–º–∏—Ä", "–†–æ–±–µ—Ä—Ç",
            "–°—Ç–∞–Ω–∏—Å–ª–∞–≤", "–§–µ–¥–æ—Ç", "–Æ—Ä–∏–π", "–Ø–∫–æ–≤", "–ê—Ä–∏—Å—Ç–∞—Ä—Ö", "–ë–µ—Ä–Ω–∞—Ä–¥", "–í–∞—Ä—Ñ–æ–ª–æ–º–µ–π",
            "–ì–µ—Ä–∞—Å–∏–º", "–î–µ–º–∏–¥", "–ï—Ñ–∏–º", "–ó–∏–Ω–æ–≤–∏–π", "–ò–æ—Å–∏—Ñ", "–ö–∞—Å—å—è–Ω", "–õ–µ–æ–Ω", "–ú–∏—Ç—Ä–æ—Ñ–∞–Ω",
            "–ù–∏–∫–æ–Ω", "–û—Å—Ç–∞–ø", "–ü–∞–Ω–∫—Ä–∞—Ç", "–†–µ–Ω–∞—Ç", "–°–∏–¥–æ—Ä", "–¢–µ—Ä–µ–Ω—Ç–∏–π", "–£—Å—Ç–∏–Ω",
            "–•–∞—Ä–∏—Ç–æ–Ω", "–ß–µ—Å–ª–∞–≤", "–≠–¥—É–∞—Ä–¥", "–Æ–ª–∏–π", "–Ø—Ä–æ—Å–ª–∞–≤", "–ê–≤–≥—É—Å—Ç", "–ë—Ä–æ–Ω–∏—Å–ª–∞–≤",
        ]

        self.female_names = [
            "–ú–∞—Ä–∏—è", "–ê–Ω–Ω–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–û–ª—å–≥–∞", "–ù–∞—Ç–∞–ª—å—è", "–ï–ª–µ–Ω–∞", "–¢–∞—Ç—å—è–Ω–∞",
            "–ê–Ω–∞—Å—Ç–∞—Å–∏—è", "–î–∞—Ä—å—è", "–ö—Å–µ–Ω–∏—è", "–°–≤–µ—Ç–ª–∞–Ω–∞", "–ò—Ä–∏–Ω–∞", "–õ—é–¥–º–∏–ª–∞", "–°–æ—Ñ–∏—è",
            "–í–∏–∫—Ç–æ—Ä–∏—è", "–ê–ª—ë–Ω–∞", "–ö—Ä–∏—Å—Ç–∏–Ω–∞", "–ï–≤–≥–µ–Ω–∏—è", "–ü–æ–ª–∏–Ω–∞", "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
            "–ù–∞–¥–µ–∂–¥–∞", "–¢–∞–º–∞—Ä–∞", "–ì–∞–ª–∏–Ω–∞", "–Ø–Ω–∞", "–ó–æ—è", "–≠–ª–µ–æ–Ω–æ—Ä–∞", "–°–Ω–µ–∂–∞–Ω–∞", "–†–∏–º–º–∞",
            "–í–∞—Ä–≤–∞—Ä–∞", "–ö–∏—Ä–∞", "–û–∫—Å–∞–Ω–∞", "–õ–∞—Ä–∏—Å–∞", "–ê—Ä–∏–Ω–∞", "–ú–∏–ª–∞", "–î–∏–∞–Ω–∞", "–ê–ª–ª–∞",
            "–ê–ª–∏–Ω–∞", "–õ–∏–ª–∏—è", "–ê–ª–∏—Å–∞", "–ú–∞—Ä–∏–Ω–∞", "–í–µ—Ä–æ–Ω–∏–∫–∞", "–ñ–∞–Ω–Ω–∞", "–ò–∑–∞–±–µ–ª–ª–∞",
            "–ö–∞—Ä–∏–Ω–∞", "–õ–∏–¥–∏—è", "–ú–∞—Ä—Ç–∞", "–ù–∏–Ω–∞", "–û–∫—Å–∞–Ω–∞", "–†–µ–≥–∏–Ω–∞", "–°–∞—Ä–∞", "–Æ–ª–∏—è",
            "–≠–ª—å–≤–∏—Ä–∞", "–Ø—Ä–æ—Å–ª–∞–≤–∞", "–ê–≥–∞—Ç–∞", "–ë–µ–ª–ª–∞", "–í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "–ì–∞–ª–∏–Ω–∞", "–î–∏–Ω–∞",
            "–ï–≤–¥–æ–∫–∏—è", "–ñ–∞–Ω–Ω–∞", "–ó–∏–Ω–∞–∏–¥–∞", "–ò—è", "–ö–ª–∞—Ä–∏—Å–∞", "–õ—é—Ü–∏—è", "–ú–∏—Ä–æ—Å–ª–∞–≤–∞",
            "–ù–µ–ª–ª–∏", "–û–ª—å–≥–∞", "–ü–µ–ª–∞–≥–µ—è", "–†–∞–¥–∞", "–°–µ—Ä–∞—Ñ–∏–º–∞", "–¢–∞–∏—Å–∏—è", "–§–∞–∏–Ω–∞",
            "–•—Ä–∏—Å—Ç–∏–Ω–∞", "–¶–≤–µ—Ç–∞–Ω–∞", "–ß—É–ª–ø–∞–Ω", "–≠–º–º–∞", "–Æ–Ω–æ–Ω–∞", "–Ø–¥–≤–∏–≥–∞", "–ê–≤—Ä–æ—Ä–∞",
            "–ë–µ–∞—Ç–∞", "–í–µ–Ω–µ—Ä–∞", "–ì–µ—Ä—Ç—Ä—É–¥–∞", "–î–∂—É–ª—å–µ—Ç—Ç–∞", "–ï—Å–µ–Ω–∏—è", "–ñ–∞—Å–º–∏–Ω", "–ó–µ–º—Ñ–∏—Ä–∞",
            "–ò–≤–µ—Ç—Ç–∞", "–ö–∞–º–∏–ª–ª–∞", "–õ–∞—Ä–∏—Å–∞", "–ú–∞–π—è", "–ù–∞—Ç–∞–ª–∏—è", "–û–¥–µ—Ç—Ç–∞", "–ü–∞—Ç—Ä–∏—Å–∏—è",
            "–†–æ–∑–∞–ª–∏—è", "–°–∏–ª—å–≤–∏—è", "–¢–∞–º–∞—Ä–∞", "–£–ª—å—è–Ω–∞", "–§–ª–æ—Ä–∞", "–•–∞—Ä–∏—Ç–∞", "–¶–µ–∑–∞—Ä–∏—è",
        ]

        self.male_surnames = [
            "–°–º–∏—Ä–Ω–æ–≤", "–ò–≤–∞–Ω–æ–≤", "–ö—É–∑–Ω–µ—Ü–æ–≤", "–ü–æ–ø–æ–≤", "–°–æ–∫–æ–ª–æ–≤", "–õ–µ–±–µ–¥–µ–≤", "–ö–æ–≤–∞–ª–µ–≤",
            "–ü–µ—Ç—Ä–æ–≤", "–ù–∏–∫–æ–ª–∞–µ–≤", "–†–æ–º–∞–Ω–æ–≤", "–§–µ–¥–æ—Ä–æ–≤", "–ê–ª–µ–∫—Å–µ–µ–≤", "–ú–æ—Ä–æ–∑–æ–≤", "–°—Ç–µ–ø–∞–Ω–æ–≤",
            "–°–∏–¥–æ—Ä–æ–≤", "–ö–æ–∑–ª–æ–≤", "–¢–∏—Ö–æ–Ω–æ–≤", "–ë–µ–ª—è–µ–≤", "–ì—Ä–æ–º–æ–≤", "–Ø–∫–æ–≤–ª–µ–≤", "–ó–∞—Ö–∞—Ä–æ–≤",
            "–§—Ä–æ–ª–æ–≤", "–°–µ—Ä–≥–µ–µ–≤", "–®–µ–≤—á–µ–Ω–∫–æ", "–ú–∞—Ç–≤–µ–µ–≤", "–î–∞–≤—ã–¥–æ–≤", "–°–∞–≤–µ–ª—å–µ–≤", "–õ—É–∫—å—è–Ω–æ–≤",
            "–ë–æ—Ä–∏—Å–æ–≤", "–ö–∏—Å–µ–ª–µ–≤", "–¢–∏–º–æ—Ñ–µ–µ–≤", "–ê—Ñ–∞–Ω–∞—Å—å–µ–≤", "–ú–∞—Ä—Ç—ã–Ω–æ–≤", "–°–æ—Ä–æ–∫–∏–Ω", "–ì—É—Å–µ–≤",
            "–ê–Ω–¥—Ä–µ–µ–≤", "–ú–∞–∫–∞—Ä–æ–≤", "–ö—Ä—ã–ª–æ–≤", "–ö—É–ª–∏–∫–æ–≤", "–ö–∞—Ä–ø–æ–≤", "–í–ª–∞—Å–æ–≤", "–ú–∞—Å–ª–æ–≤",
            "–ò—Å–∞–∫–æ–≤", "–¢—É—Ä–æ–≤", "–°–∞—Ñ–æ–Ω–æ–≤", "–ü–∞–Ω–æ–≤", "–ú–∏—à–∏–Ω", "–†–æ–¥–∏–Ω", "–ï—Ä–º–∞–∫–æ–≤", "–ó—É–µ–≤",
            "–¢–æ–∫–∞—Ä–µ–≤", "–ö–∞–ª–∏–Ω–∏–Ω", "–í–æ—Ä–æ–Ω–æ–≤", "–°—É—Ö–∞–Ω–æ–≤", "–õ–∞–ø–∏–Ω", "–ü—Ä–æ—Ö–æ—Ä–æ–≤", "–ù–µ—Å—Ç–µ—Ä–æ–≤",
            "–°–æ–±–æ–ª–µ–≤", "–¢–∏—Ç–æ–≤", "–ú–∏—Ä–æ–Ω–æ–≤", "–ú–µ–ª—å–Ω–∏–∫–æ–≤", "–ë—É—Ä–æ–≤", "–ë—ã–∫–æ–≤", "–ó—ã–∫–æ–≤",
            "–ê–≥–∞—Ñ–æ–Ω–æ–≤", "–ë–∞—Ä–∏–Ω–æ–≤", "–í–æ–ª—å—Å–∫–∏–π", "–ì–∞–≤—Ä–∏–ª–æ–≤", "–î—Ä–æ–∑–¥–æ–≤", "–ï–≤—Å–µ–µ–≤", "–ñ—É—Ä–∞–≤–ª–µ–≤",
            "–ó–≤–µ—Ä–µ–≤", "–ö–∞–ø—É—Å—Ç–∏–Ω", "–õ–∞–≤—Ä–æ–≤", "–ú–∏–Ω–∏–Ω", "–ù–æ—Å–æ–≤", "–û–≤—á–∏–Ω–Ω–∏–∫–æ–≤", "–ü–∞—Ö–æ–º–æ–≤",
            "–†—è–±–æ–≤", "–°—Ç—Ä–µ–ª–∫–æ–≤", "–¢—Ä–µ—Ç—å—è–∫–æ–≤", "–£—Å–ø–µ–Ω—Å–∫–∏–π", "–§–æ–º–∏–Ω", "–•–∞—Ä–ª–∞–º–æ–≤", "–¶–≤–µ—Ç–∫–æ–≤",
            "–ß–µ—Ä–Ω—ã—à–µ–≤", "–®–∞–ø–æ–≤–∞–ª–æ–≤", "–©–µ—Ä–±–∞–∫–æ–≤", "–≠–¥—É–∞—Ä–¥–æ–≤", "–Æ–¥–∏–Ω", "–Ø—à–∏–Ω", "–ê–±—Ä–∞–º–æ–≤",
            "–ë–∞–∂–µ–Ω–æ–≤", "–í–æ—Ä–æ–Ω—Ü–æ–≤", "–ì–æ—Ä–±–∞—á–µ–≤", "–î–µ–º—å—è–Ω–æ–≤", "–ï—Ñ–∏–º–æ–≤", "–ó–∞–¥–æ—Ä–Ω–æ–≤", "–ò–≥–Ω–∞—Ç—å–µ–≤",
            "–ö–∞–±–∞–Ω–æ–≤", "–õ–∏–∑—É–Ω–æ–≤", "–ú–∏—Ö–∞–π–ª–æ–≤", "–ù–µ—Å—Ç–µ—Ä–æ–≤", "–û—Ä–ª–æ–≤", "–ü–∞–≤–ª–æ–≤", "–†–æ–∂–∫–æ–≤",
            "–°–µ–º–µ–Ω–æ–≤", "–¢–∞—Ä–∞—Å–æ–≤", "–£–≤–∞—Ä–æ–≤", "–§–µ–¥–æ—Å–µ–µ–≤", "–•—É–¥—è–∫–æ–≤", "–¶–∞—Ä–µ–≤", "–ß–µ—Ä–∫–∞—Å–æ–≤",
        ]

        self.female_surnames = [
            "–°–º–∏—Ä–Ω–æ–≤–∞", "–ò–≤–∞–Ω–æ–≤–∞", "–ö—É–∑–Ω–µ—Ü–æ–≤–∞", "–ü–æ–ø–æ–≤–∞", "–°–æ–∫–æ–ª–æ–≤–∞", "–õ–µ–±–µ–¥–µ–≤–∞",
            "–ö–æ–≤–∞–ª—ë–≤–∞", "–ü–µ—Ç—Ä–æ–≤–∞", "–ù–∏–∫–æ–ª–∞–µ–≤–∞", "–†–æ–º–∞–Ω–æ–≤–∞", "–§–µ–¥–æ—Ä–æ–≤–∞", "–ê–ª–µ–∫—Å–µ–µ–≤–∞",
            "–ú–æ—Ä–æ–∑–æ–≤–∞", "–°—Ç–µ–ø–∞–Ω–æ–≤–∞", "–°–∏–¥–æ—Ä–æ–≤–∞", "–ö–æ–∑–ª–æ–≤–∞", "–¢–∏—Ö–æ–Ω–æ–≤–∞", "–ë–µ–ª—è–µ–≤–∞",
            "–ì—Ä–æ–º–æ–≤–∞", "–Ø–∫–æ–≤–ª–µ–≤–∞", "–ó–∞—Ö–∞—Ä–æ–≤–∞", "–§—Ä–æ–ª–æ–≤–∞", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∞", "–ì—Ä–∏–≥–æ—Ä—å–µ–≤–∞",
            "–ú–∞—Ç–≤–µ–µ–≤–∞", "–î–∞–≤—ã–¥–æ–≤–∞", "–°–∞–≤–µ–ª—å–µ–≤–∞", "–õ—É–∫—å—è–Ω–æ–≤–∞", "–ë–æ—Ä–∏—Å–æ–≤–∞", "–ö–∏—Å–µ–ª–µ–≤–∞",
            "–¢–∏–º–æ—Ñ–µ–µ–≤–∞", "–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞", "–ú–∞—Ä—Ç—ã–Ω–æ–≤–∞", "–°–æ—Ä–æ–∫–∏–Ω–∞", "–ì—É—Å–µ–≤–∞", "–ê–Ω–¥—Ä–µ–µ–≤–∞",
            "–ú–∞–∫–∞—Ä–æ–≤–∞", "–ö—Ä—ã–ª–æ–≤–∞", "–ö—É–ª–∏–∫–æ–≤–∞", "–ö–∞—Ä–ø–æ–≤–∞", "–í–ª–∞—Å–æ–≤–∞", "–ú–∞—Å–ª–æ–≤–∞", "–ò—Å–∞–∫–æ–≤–∞",
            "–¢—É—Ä–æ–≤–∞", "–°–∞—Ñ–æ–Ω–æ–≤–∞", "–ü–∞–Ω–æ–≤–∞", "–ú–∏—à–∏–Ω–∞", "–†–æ–¥–∏–Ω–∞", "–ï—Ä–º–∞–∫–æ–≤–∞", "–ó—É–µ–≤–∞",
            "–¢–æ–∫–∞—Ä–µ–≤–∞", "–ö–∞–ª–∏–Ω–∏–Ω–∞", "–í–æ—Ä–æ–Ω–æ–≤–∞", "–°—É—Ö–∞–Ω–æ–≤–∞", "–õ–∞–ø–∏–Ω–∞", "–ü—Ä–æ—Ö–æ—Ä–æ–≤–∞", "–ù–µ—Å—Ç–µ—Ä–æ–≤–∞",
            "–°–æ–±–æ–ª–µ–≤–∞", "–¢–∏—Ç–æ–≤–∞", "–ú–∏—Ä–æ–Ω–æ–≤–∞", "–ú–µ–ª—å–Ω–∏–∫–æ–≤–∞", "–ë—É—Ä–æ–≤–∞", "–ë—ã–∫–æ–≤–∞", "–ó—ã–∫–æ–≤–∞",
            "–ê–≥–∞—Ñ–æ–Ω–æ–≤–∞", "–ë–∞—Ä–∏–Ω–æ–≤–∞", "–í–æ–ª—å—Å–∫–∞—è", "–ì–∞–≤—Ä–∏–ª–æ–≤–∞", "–î—Ä–æ–∑–¥–æ–≤–∞", "–ï–≤—Å–µ–µ–≤–∞", "–ñ—É—Ä–∞–≤–ª–µ–≤–∞",
            "–ó–≤–µ—Ä–µ–≤–∞", "–ö–∞–ø—É—Å—Ç–∏–Ω–∞", "–õ–∞–≤—Ä–æ–≤–∞", "–ú–∏–Ω–∏–Ω–∞", "–ù–æ—Å–æ–≤–∞", "–û–≤—á–∏–Ω–Ω–∏–∫–æ–≤–∞", "–ü–∞—Ö–æ–º–æ–≤–∞",
            "–†—è–±–æ–≤–∞", "–°—Ç—Ä–µ–ª–∫–æ–≤–∞", "–¢—Ä–µ—Ç—å—è–∫–æ–≤–∞", "–£—Å–ø–µ–Ω—Å–∫–∞—è", "–§–æ–º–∏–Ω–∞", "–•–∞—Ä–ª–∞–º–æ–≤–∞", "–¶–≤–µ—Ç–∫–æ–≤–∞",
            "–ß–µ—Ä–Ω—ã—à–µ–≤–∞", "–®–∞–ø–æ–≤–∞–ª–æ–≤–∞", "–©–µ—Ä–±–∞–∫–æ–≤–∞", "–≠–¥—É–∞—Ä–¥–æ–≤–∞", "–Æ–¥–∏–Ω–∞", "–Ø—à–∏–Ω–∞", "–ê–±—Ä–∞–º–æ–≤–∞",
            "–ë–∞–∂–µ–Ω–æ–≤–∞", "–í–æ—Ä–æ–Ω—Ü–æ–≤–∞", "–ì–æ—Ä–±–∞—á–µ–≤–∞", "–î–µ–º—å—è–Ω–æ–≤–∞", "–ï—Ñ–∏–º–æ–≤–∞", "–ó–∞–¥–æ—Ä–Ω–æ–≤–∞", "–ò–≥–Ω–∞—Ç—å–µ–≤–∞",
            "–ö–∞–±–∞–Ω–æ–≤–∞", "–õ–∏–∑—É–Ω–æ–≤–∞", "–ú–∏—Ö–∞–π–ª–æ–≤–∞", "–ù–µ—Å—Ç–µ—Ä–æ–≤–∞", "–û—Ä–ª–æ–≤–∞", "–ü–∞–≤–ª–æ–≤–∞", "–†–æ–∂–∫–æ–≤–∞",
            "–°–µ–º–µ–Ω–æ–≤–∞", "–¢–∞—Ä–∞—Å–æ–≤–∞", "–£–≤–∞—Ä–æ–≤–∞", "–§–µ–¥–æ—Å–µ–µ–≤–∞", "–•—É–¥—è–∫–æ–≤–∞", "–¶–∞—Ä–µ–≤–∞", "–ß–µ—Ä–∫–∞—Å–æ–≤–∞",
        ]

        self.male_patronymics = [
            "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", "–î–º–∏—Ç—Ä–∏–µ–≤–∏—á", "–ò–≤–∞–Ω–æ–≤–∏—á", "–ú–∞–∫—Å–∏–º–æ–≤–∏—á", "–ê—Ä—Ç–µ–º–æ–≤–∏—á",
            "–°–µ—Ä–≥–µ–µ–≤–∏—á", "–Æ—Ä—å–µ–≤–∏—á", "–†–æ–º–∞–Ω–æ–≤–∏—á", "–í–∏—Ç–∞–ª—å–µ–≤–∏—á", "–î–µ–Ω–∏—Å–æ–≤–∏—á",
            "–ù–∏–∫–∏—Ç–∏—á", "–°—Ç–∞–Ω–∏—Å–ª–∞–≤–æ–≤–∏—á", "–ï–≥–æ—Ä–æ–≤–∏—á", "–§–µ–¥–æ—Ä–æ–≤–∏—á", "–ü–∞–≤–ª–æ–≤–∏—á",
            "–ò–≥–æ—Ä–µ–≤–∏—á", "–ü–µ—Ç—Ä–æ–≤–∏—á", "–ì—Ä–∏–≥–æ—Ä—å–µ–≤–∏—á", "–î–∞–≤—ã–¥–æ–≤–∏—á", "–§–∏–ª–∏–ø–ø–æ–≤–∏—á",
            "–ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á", "–ë–æ—Ä–∏—Å–æ–≤–∏—á", "–í–∞–¥–∏–º–æ–≤–∏—á", "–ì–µ–Ω–Ω–∞–¥–∏–µ–≤–∏—á", "–ï–≤–≥–µ–Ω—å–µ–≤–∏—á",
            "–ó–∞—Ö–∞—Ä–æ–≤–∏—á", "–ò–ª—å–∏—á", "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∏—á", "–õ—å–≤–æ–≤–∏—á", "–ú–∏—Ö–∞–π–ª–æ–≤–∏—á",
            "–ù–∏–∫–æ–ª–∞–µ–≤–∏—á", "–û–ª–µ–≥–æ–≤–∏—á", "–ü–∞–≤–ª–æ–≤–∏—á", "–†–æ–±–µ—Ä—Ç–æ–≤–∏—á", "–°–µ–º–µ–Ω–æ–≤–∏—á",
            "–¢–∏–º–æ—Ñ–µ–µ–≤–∏—á", "–§–µ–¥–æ—Ä–æ–≤–∏—á", "–≠–¥—É–∞—Ä–¥–æ–≤–∏—á", "–Æ—Ä—å–µ–≤–∏—á", "–Ø—Ä–æ—Å–ª–∞–≤–æ–≤–∏—á",
        ]

        self.female_patronymics = [
            "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞", "–î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞", "–ò–≤–∞–Ω–æ–≤–Ω–∞", "–ú–∞–∫—Å–∏–º–æ–≤–Ω–∞", "–ê—Ä—Ç–µ–º–æ–≤–Ω–∞",
            "–°–µ—Ä–≥–µ–µ–≤–Ω–∞", "–Æ—Ä—å–µ–≤–Ω–∞", "–†–æ–º–∞–Ω–æ–≤–Ω–∞", "–í–∏—Ç–∞–ª—å–µ–≤–Ω–∞", "–î–µ–Ω–∏—Å–æ–≤–Ω–∞",
            "–ù–∏–∫–∏—Ç–∏—á–Ω–∞", "–°—Ç–∞–Ω–∏—Å–ª–∞–≤–æ–≤–Ω–∞", "–ï–≥–æ—Ä–æ–≤–Ω–∞", "–§–µ–¥–æ—Ä–æ–≤–Ω–∞", "–ü–∞–≤–ª–æ–≤–Ω–∞",
            "–ò–≥–æ—Ä–µ–≤–Ω–∞", "–ü–µ—Ç—Ä–æ–≤–Ω–∞", "–ì—Ä–∏–≥–æ—Ä—å–µ–≤–Ω–∞", "–î–∞–≤—ã–¥–æ–≤–Ω–∞", "–§–∏–ª–∏–ø–ø–æ–≤–Ω–∞",
            "–ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–∞", "–ë–æ—Ä–∏—Å–æ–≤–Ω–∞", "–í–∞–¥–∏–º–æ–≤–Ω–∞", "–ì–µ–Ω–Ω–∞–¥–∏–µ–≤–Ω–∞", "–ï–≤–≥–µ–Ω—å–µ–≤–Ω–∞",
            "–ó–∞—Ö–∞—Ä–æ–≤–Ω–∞", "–ò–ª—å–∏–Ω–∏—á–Ω–∞", "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–Ω–∞", "–õ—å–≤–æ–≤–Ω–∞", "–ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞",
            "–ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞", "–û–ª–µ–≥–æ–≤–Ω–∞", "–ü–∞–≤–ª–æ–≤–Ω–∞", "–†–æ–±–µ—Ä—Ç–æ–≤–Ω–∞", "–°–µ–º–µ–Ω–æ–≤–Ω–∞",
            "–¢–∏–º–æ—Ñ–µ–µ–≤–Ω–∞", "–§–µ–¥–æ—Ä–æ–≤–Ω–∞", "–≠–¥—É–∞—Ä–¥–æ–≤–Ω–∞", "–Æ—Ä—å–µ–≤–Ω–∞", "–Ø—Ä–æ—Å–ª–∞–≤–æ–≤–Ω–∞",
        ]

        self.cities = [
            "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
            "–ú–∏–Ω—Å–∫", "–ê–ª–º–∞—Ç—ã", "–¢–∞—à–∫–µ–Ω—Ç", "–ë–∏—à–∫–µ–∫", "–ê—Å—Ç–∞–Ω–∞", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
            "–°–∞—Ä–∞—Ç–æ–≤", "–¢—É–ª–∞", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–í–æ—Ä–æ–Ω–µ–∂", "–†—è–∑–∞–Ω—å", "–ò–∂–µ–≤—Å–∫",
            "–û–º—Å–∫", "–£—Ñ–∞", "–¢–æ–º—Å–∫", "–ö–∞–ª—É–≥–∞", "–°–æ—á–∏", "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å", "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å",
            "–ö–∏—Ä–æ–≤", "–ß–µ–±–æ–∫—Å–∞—Ä—ã", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–¢–≤–µ—Ä—å", "–û—Ä–ª–æ–≤", "–õ–∏–ø–µ—Ü–∫",
            "–ë—Ä—è–Ω—Å–∫", "–ì–æ–º–µ–ª—å", "–ì—Ä–æ–¥–Ω–æ", "–ú–æ–≥–∏–ª–µ–≤", "–í–∏—Ç–µ–±—Å–∫", "–ë—Ä–µ—Å—Ç",
            "–î—É—à–∞–Ω–±–µ", "–¢–±–∏–ª–∏—Å–∏", "–ï—Ä–µ–≤–∞–Ω", "–ë–∞–∫—É", "–ê—à—Ö–∞–±–∞–¥",
            "–¢–∏—Ä–∞—Å–ø–æ–ª—å", "–ö–∏—à–∏–Ω–µ–≤", "–¶—Ö–∏–Ω–≤–∞–ª", "–°—É—Ö—É–º–∏", "–ù–∞–ª—å—á–∏–∫", "–ú–∞—Ö–∞—á–∫–∞–ª–∞",
            "–ì—Ä–æ–∑–Ω—ã–π", "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å", "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥",
            "–ö–æ—Å—Ç—Ä–æ–º–∞", "–ò—Ä–∫—É—Ç—Å–∫", "–ß–∏—Ç–∞", "–£–ª–∞–Ω-–£–¥—ç", "–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫", "–•–∞–±–∞—Ä–æ–≤—Å–∫",
            "–Ø–∫—É—Ç—Å–∫", "–¢—é–º–µ–Ω—å", "–°—É—Ä–≥—É—Ç", "–ù–∏–∂–Ω–∏–π –¢–∞–≥–∏–ª", "–ü–µ—Ä–º—å", "–ü–µ–Ω–∑–∞",
            "–ë–∞—Ä–Ω–∞—É–ª", "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "–í–æ–ª–∂—Å–∫–∏–π", "–í—ã–∫—Å–∞", "–ì–∞—Ç—á–∏–Ω–∞", "–î–∑–µ—Ä–∂–∏–Ω—Å–∫",
            "–ò–∂–µ–≤—Å–∫", "–ô–æ—à–∫–∞—Ä-–û–ª–∞", "–ö–∞–ª—É–≥–∞", "–ö–µ–º–µ—Ä–æ–≤–æ", "–ö–∏—Ä–æ–≤", "–ö–æ—Å—Ç—Ä–æ–º–∞",
            "–ö—É—Ä–≥–∞–Ω", "–õ–∏–ø–µ—Ü–∫", "–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫", "–ú—É—Ä–º–∞–Ω—Å–∫", "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã",
            "–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫", "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫", "–û—Ä—Å–∫", "–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫", "–ü—Å–∫–æ–≤",
            "–†—ã–±–∏–Ω—Å–∫", "–°–∞—Ä–∞–Ω—Å–∫", "–°–µ—Ä–ø—É—Ö–æ–≤", "–°—ã–∫—Ç—ã–≤–∫–∞—Ä", "–¢–∞–≥–∞–Ω—Ä–æ–≥", "–¢–∞–º–±–æ–≤",
            "–£–ª–∞–Ω-–£–¥—ç", "–£–ª—å—è–Ω–æ–≤—Å–∫", "–•–∏–º–∫–∏", "–ß–µ–±–æ–∫—Å–∞—Ä—ã", "–≠–Ω–≥–µ–ª—å—Å", "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫",
            "–Ø—Ä–æ—Å–ª–∞–≤–ª—å"
        ]

    def generate_random_birthdate(self):
        start_date = datetime.now() - timedelta(days=60*365)  
        end_date = datetime.now() - timedelta(days=18*365)   
        return start_date + (end_date - start_date) * random.random()

    def calculate_age(self, birthdate):
        today = datetime.now()
        age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))
        return age
# –∏–¥–µ—é —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —á–∞—Å—Ç—å –∫–æ–¥–∞ –≤–∑—è–ª —É t.me/hikka_mods
# –∏–∑ –º–æ–¥—É–ª—è https://github.com/C0dwiz/H.Modules/blob/main/AccountData.py#L36-L50
    async def get_creation_date(self, id: int) -> str:
        url = "https://restore-access.indream.app/regdate"
        headers = {
            "accept": "*/*",
            "content-type": "application/x-www-form-urlencoded",
            "user-agent": "Nicegram/92 CFNetwork/1390 Darwin/22.0.0",
            "x-api-key": "e758fb28-79be-4d1c-af6b-066633ded128",
            "accept-language": "en-US,en;q=0.9",
        }
        data = {"telegramId": id}
        response = requests.post(url, headers=headers, json=data)
        if response.status_code == 200:
            return response.json()["data"]["date"]
        else:
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"

    async def doxcmd(self, message):
        "–ü—Ä–æ–±–∏—Ç—å –≤ –±–∞–∑–µ"
        if self.is_doxing:
            await message.edit("<b>–î–æ–∫—Å–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.</b>")
            return

        if not (message.is_reply or utils.get_args_raw(message)):
            await message.edit("<b>–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —é–∑–µ—Ä–Ω–µ–π–º, —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>")
            return

        self.is_doxing = True

        try:
            user = None

            if message.is_reply:
                replied_message = await message.get_reply_message()
                user = await message.client.get_entity(replied_message.from_id)
            else:
                args = utils.get_args_raw(message)
                if args:
                    try:
                        user = await message.client.get_entity(args.strip())
                    except Exception:
                        await message.edit("<b>–≠—Ç–æ—Ç —é–∑–µ—Ä–Ω–µ–π–º –Ω–∏–∫–µ–º –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π.</b>")
                        return

            if not user:
                await message.edit("<b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.</b>")
                return

            if isinstance(user, User) and user.bot:
                await message.edit(f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user.id}'>{user.first_name}</a> —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º, —è –º–æ–≥—É –¥–æ–∫—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª—é–¥–µ–π.</b>")
                return
            elif isinstance(user, Channel):
                await message.edit(f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='https://t.me/{user.username}'>{user.title}</a> —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º, —è –º–æ–≥—É –¥–æ–∫—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª—é–¥–µ–π.</b>")
                return

            if user.id == message.from_id:
                await message.edit("<b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–∫—Å–∏—Ç—å —Å–µ–±—è.</b>")
                return

            await message.edit("<b>–ó–∞–ø—É—Å–∫ –¥–æ–∫—Å–∏–Ω–≥–∞...</b>")
            await asyncio.sleep(1)

            animation_type = self.config["animation_type"]

            if animation_type == "short":
                await self.short_loading(message)
            elif animation_type == "standart":
                await self.medium_loading(message)
            else:
                await self.long_loading(message)

            await self.display_results(message, user)

        finally:
            self.is_doxing = False

    async def short_loading(self, message):
        await asyncio.sleep(1)
        await message.edit("<b>–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...</b>")
        await asyncio.sleep(2)

    async def medium_loading(self, message):
        current_percent = 0
        while current_percent < 100:
            increment = random.randint(5, 25)
            current_percent = min(100, current_percent + increment)
            filled_blocks = current_percent // 10
            await message.edit(f"<b>–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...</b> [{'‚ñ†' * filled_blocks}{'‚ñ°' * (10 - filled_blocks)}] {current_percent}%")
            await asyncio.sleep(random.uniform(0.3, 0.7))

    async def long_loading(self, message):
        current_percent = 0
        while current_percent < 100:
            increment = random.randint(5, 15)
            current_percent = min(100, current_percent + increment)
            filled_blocks = current_percent // 10
            await message.edit(f"<b>–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...</b> [{'‚ñ†' * filled_blocks}{'‚ñ°' * (10 - filled_blocks)}] {current_percent}%")
            await asyncio.sleep(random.uniform(0.4, 0.9))

    async def display_results(self, message, user):
        user_first_name = user.first_name if user.first_name else ""

        is_male = user_first_name in self.male_names
        is_female = user_first_name in self.female_names

        if is_male:
            random_name = user_first_name
            random_surname = random.choice(self.male_surnames)
            random_patronymic = random.choice(self.male_patronymics)
        elif is_female:
            random_name = user_first_name
            random_surname = random.choice(self.female_surnames)
            random_patronymic = random.choice(self.female_patronymics)
        else:
            random_name = random.choice(self.male_names + self.female_names)
            if random_name in self.male_names:
                random_surname = random.choice(self.male_surnames)
                random_patronymic = random.choice(self.male_patronymics)
            else:
                random_surname = random.choice(self.female_surnames)
                random_patronymic = random.choice(self.female_patronymics)

        random_city = random.choice(self.cities)

        random_ip = f"192.168.{random.randint(0, 255)}.{random.randint(0, 255)}"
        random_phone = f"+7 (999) {random.randint(100, 999)}-{random.randint(1000, 9999)}"#–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Å–µ–∑–æ–Ω –≥—Ä–∏–±–æ–≤, –ø–æ —ç—Ç–æ–º—É –∞–≤—Ç–æ—Ä—É –Ω–µ–≥–¥–µ –±—Ä–∞—Ç—å –∏–¥–µ–∏ –¥–ª—è –ø—Ä–æ–∑–≤–∏—â
        funny_nickname = random.choice([
            "–î—É—à–Ω–∏–ª–∞", "–°—ë–º–≥–∞", "–î–µ–¥ –∏–Ω—Å—É–ª—å—Ç", "–°–ø–∞–º—â–∏–∫", "–ú–µ–≥–∞—á–æ—Ä—Ç", "–ú–æ—à–µ–Ω–Ω–∏–∫",
            "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ñ–µ–ª—å–Ω—ã–π —Å—Ç–∞–∫–∞–Ω—á–∏–∫", "–ß—É–¥–æ –≤ –ø–µ—Ä—å—è—Ö", "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –±–∞–∫–ª–∞–∂–∞–Ω",
            "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–¥—ë–∂", "–°–º–æ—Ä—â–µ–Ω–Ω—ã–π –∫—É—Å–æ—á–µ–∫ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ —á–µ–≥–æ", "–î–µ–¥-—Å–∫—É—Ñ–∏–∫",
            "–¢—Ä–∏—Å–∏—Å—è", "–°–∏—Å—å–∫–∞ –ø–æ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–π—Ü–∞", "–¢—É–º–±–æ—á–∫–∞", "–ö–∞–ø–∏—Ç–∞–Ω –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å",
            "–ì—Ä–æ–∑–Ω—ã–π –º–µ—Ç—Ä —Å –∫–µ–ø–∫–æ–π", "–î–∏–∫—Ç–∞—Ç–æ—Ä", "–°–æ–ª–µ–≤–æ–π –º–∞–≥–Ω–∞—Ç", "–î–∏–ª–µ—Ä",
            "–û—á–µ—Ä–µ–¥–Ω–æ–π –ì–µ–Ω–∏–π", "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä"
        ])

        user_rating = random.randint(1, 10)

        birthdate = self.generate_random_birthdate()
        age = self.calculate_age(birthdate)

        creation_date_str = await self.get_creation_date(user.id)
        if "–û—à–∏–±–∫–∞" not in creation_date_str:
            if len(creation_date_str) == 7: 
                creation_date_str += '-01' 
            creation_date = datetime.strptime(creation_date_str, "%Y-%m-%d")
            account_age = self.calculate_age(creation_date)
        else:
            account_age = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"

        all_info = [
            (f"<b>ü™™–§–ò–û:</b> <code>{random_surname} {random_name} {random_patronymic}</code>", "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"),
            (f"<b>üåÜ–ì–æ—Ä–æ–¥:</b> <code>{random_city}</code>", ""),
            (f"<b>üì¢IP-–∞–¥—Ä–µ—Å:</b> <code>{random_ip}</code>", ""),
            (f"<b>üì±–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{random_phone}</code>\n", ""),
            (f"<b>‚è≥–í–æ–∑—Ä–∞—Å—Ç:</b> <code>{age} –ª–µ—Ç</code>", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"),
            (f"<b>üóìÔ∏è–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> <code>{birthdate.strftime('%d.%m.%Y')}</code>", ""),
            (f"<b>‚è≥–í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{account_age} –ª–µ—Ç</code>\n", ""),
            (f"<b>üìí–ü—Ä–æ–∑–≤–∏—â–µ:</b> <code>{funny_nickname}</code>", "–ü—Ä–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"),
            (f"<b>‚ÑπÔ∏èID:</b> <code>{user.id}</code>", ""),
            (f"<b>‚ÑπÔ∏è–Æ–∑–µ—Ä–Ω–µ–π–º:</b> {f'@{user.username}' if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}", ""),
            (f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> <code>{user_rating}/10</code>", "")
        ]

        
        
        
        display_text = f"<b>–í–æ—Ç –≤—Å—ë, —á—Ç–æ —è –Ω–∞—à–µ–ª –ø—Ä–æ {user.first_name}:</b>\n\n"

        if self.config["InfoAnimation"]:
            for info, section in all_info:
                if section:
                    display_text += f"<b>{section}</b>\n"
                display_text += info + "\n"
                await message.edit(display_text)
                await asyncio.sleep(0.5)
        else:
            for info, section in all_info:
                if section:
                    display_text += f"<b>{section}</b>\n"
                display_text += info + "\n"
            await message.edit(display_text)